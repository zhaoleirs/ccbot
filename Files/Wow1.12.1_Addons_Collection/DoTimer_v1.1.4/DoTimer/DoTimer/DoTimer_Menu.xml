<Ui xmlns="http://www.blizzard.com/wow/ui/"   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"   xsi:schemaLocation="http://www.blizzard.com/wow/ui/">
	<Slider name="DoTimerSliderTemplate" virtual="true" orientation="HORIZONTAL" enableMouse="true">
		<Size>
			<AbsDimension x="128" y="17"/>
		</Size>
		<HitRectInsets>
			<AbsInset left="0" right="0" top="-10" bottom="-10"/>
		</HitRectInsets>
		<Backdrop bgFile="Interface\Buttons\UI-SliderBar-Background" edgeFile="Interface\Buttons\UI-SliderBar-Border" tile="true">
			<EdgeSize>
				<AbsValue val="8"/>
			</EdgeSize>
			<TileSize>
				<AbsValue val="8"/>
			</TileSize>
			<BackgroundInsets>
				<AbsInset left="3" right="3" top="6" bottom="6"/>
			</BackgroundInsets>
		</Backdrop>
		<Layers>
			<Layer level="ARTWORK">
				<FontString name="$parentText" inherits="GameFontNormalSmall">
					<Anchors>
						<Anchor point="BOTTOM" relativePoint="TOP"/>
					</Anchors>
				</FontString>
				<FontString name="$parentLow" inherits="GameFontHighlightSmall" text="LOW">
					<Anchors>
						<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT">
							<Offset>
								<AbsDimension x="2" y="3"/>
							</Offset>
						</Anchor>
					</Anchors>
				</FontString>
				<FontString name="$parentHigh" inherits="GameFontHighlightSmall" text="HIGH">
					<Anchors>
						<Anchor point="TOPRIGHT" relativePoint="BOTTOMRIGHT">
							<Offset>
								<AbsDimension x="-2" y="3"/>
							</Offset>
						</Anchor>
					</Anchors>
				</FontString>
				<FontString name="$parentValue" inherits="GameFontHighlightSmall" text="VALUE">
					<Anchors>
						<Anchor point="LEFT" relativePoint="RIGHT">
							<Offset>
								<AbsDimension x="3" y="0"/>
							</Offset>
						</Anchor>
					</Anchors>
				</FontString>
			</Layer>
		</Layers>
		<Scripts>
			<OnEnter>
				GameTooltip:SetOwner(this, "ANCHOR_RIGHT");
				GameTooltip:SetText(this.tooltipText, nil, nil, nil, nil, 1);
			</OnEnter>
			<OnLeave>
				GameTooltip:Hide();
			</OnLeave>
			<OnValueChanged> 
				local value = this:GetValue()
				local formatstring
				if math.floor(value) == value then 
					formatstring = "%2d"
				else
					formatstring = "%.2f"
				end
				getglobal(this:GetName().."Value"):SetText(string.format(formatstring,value)); 
			</OnValueChanged>
		</Scripts>
		<ThumbTexture name="$parentThumb" file="Interface\Buttons\UI-SliderBar-Button-Horizontal">
			<Size>
				<AbsDimension x="32" y="32"/>
			</Size>
		</ThumbTexture>
	</Slider>
	<CheckButton name="DoTimerCheckButtonTemplate" virtual="true">
		<HitRectInsets>
			<AbsInset left="0" right="-100" top="0" bottom="0"/>
		</HitRectInsets>
		<Size>
			<AbsDimension x="32" y="32"/>
		</Size>
		<Layers>
			<Layer level="ARTWORK">
				<FontString name="$parentText" inherits="GameFontNormalSmall">
					<Anchors>
						<Anchor point="LEFT" relativePoint="RIGHT">
							<Offset>
								<AbsDimension x="-2" y="0"/>
							</Offset>
						</Anchor>
					</Anchors>
				</FontString>
			</Layer>
		</Layers>
		<NormalTexture file="Interface\Buttons\UI-CheckBox-Up"/>
		<PushedTexture file="Interface\Buttons\UI-CheckBox-Down"/>
		<HighlightTexture file="Interface\Buttons\UI-CheckBox-Highlight" alphaMode="ADD"/>
		<CheckedTexture file="Interface\Buttons\UI-CheckBox-Check"/>
		<DisabledCheckedTexture file="Interface\Buttons\UI-CheckBox-Check-Disabled"/>
		<Scripts>
			<OnClick>
				if this:GetChecked() then
					PlaySound("igMainMenuOptionCheckBoxOn");
					this:SetChecked(1)
				else
					PlaySound("igMainMenuOptionCheckBoxOff");
					this:SetChecked(0)
				end
			</OnClick>
			<OnEnter>
				GameTooltip:SetOwner(this, "ANCHOR_RIGHT");
				GameTooltip:SetText(this.tooltipText, nil, nil, nil, nil, 1);
			</OnEnter>
			<OnLeave>
				GameTooltip:Hide();
			</OnLeave>
		</Scripts>
	</CheckButton>
	<Button name="DoTimerButtonTemplate" virtual="true">
		<Size>
			<AbsDimension x="120" y="21"/>
		</Size>
		<ButtonText name="$parentText"/>
		<NormalFont inherits="GameFontNormal"/>
		<HighlightFont inherits="GameFontHighlight"/>
		<DisabledFont inherits="GameFontDisable"/>
		<NormalTexture inherits="UIPanelButtonUpTexture"/>
		<PushedTexture inherits="UIPanelButtonDownTexture"/>
		<DisabledTexture inherits="UIPanelButtonDisabledTexture"/>
		<HighlightTexture inherits="UIPanelButtonHighlightTexture"/>
		<Scripts>
			<OnEnter>
				GameTooltip:SetOwner(this, "ANCHOR_RIGHT");
				GameTooltip:SetText(this.tooltipText, nil, nil, nil, nil, 1);
			</OnEnter>
			<OnLeave>
				GameTooltip:Hide();
			</OnLeave>
		</Scripts>			
	</Button>
	<EditBox name="DoTimerEditBoxTemplate" enableMouse="true" virtual="true" autoFocus="false">
		<Size>
			<AbsDimension x="100" y="30"/>
		</Size>
		<Layers>
			<Layer level="BACKGROUND">
				<Texture name="$parentLeft" file="Interface\Common\Common-Input-Border">
					<Size>
						<AbsDimension x="8" y="20"/>
					</Size>
					<Anchors>
						<Anchor point="LEFT">
							<Offset>
								<AbsDimension x="-5" y="0"/>
							</Offset>
						</Anchor>
					</Anchors>
					<TexCoords left="0" right="0.0625" top="0" bottom="0.625"/>
				</Texture>
				<Texture name="$parentRight" file="Interface\Common\Common-Input-Border">
					<Size>
						<AbsDimension x="8" y="20"/>
					</Size>
					<Anchors>
						<Anchor point="RIGHT">
							<Offset>
								<AbsDimension x="0" y="0"/>
							</Offset>
						</Anchor>
					</Anchors>
					<TexCoords left="0.9375" right="1.0" top="0" bottom="0.625"/>
				</Texture>
				<Texture name="$parentMiddle" file="Interface\Common\Common-Input-Border">
					<Size>
						<AbsDimension x="10" y="20"/>
					</Size>
					<Anchors>
						<Anchor point="LEFT" relativeTo="$parentLeft" relativePoint="RIGHT"/>
						<Anchor point="RIGHT" relativeTo="$parentRight" relativePoint="LEFT"/>
					</Anchors>
					<TexCoords left="0.0625" right="0.9375" top="0" bottom="0.625"/>
				</Texture>
				<FontString name="$parentText" inherits="GameFontNormalSmall" text="VALUE">
					<Anchors>
						<Anchor point="LEFT" relativePoint="RIGHT">
							<Offset>
								<AbsDimension x="3" y="0"/>
							</Offset>
						</Anchor>
					</Anchors>
				</FontString>
			</Layer>
		</Layers>
		<Scripts>
			<OnEscapePressed>
				this:SetText(this.text); this:ClearFocus()
			</OnEscapePressed>
			<OnEditFocusLost>
				this:HighlightText(0, 0)
			</OnEditFocusLost>
			<OnEditFocusGained>
				this:SetText(this.text); this:HighlightText();
			</OnEditFocusGained>
			<OnEnterPressed>
				this.text = this:GetText(); this:ClearFocus()
			</OnEnterPressed>
			<OnEnter>
				GameTooltip:SetOwner(this, "ANCHOR_RIGHT");
				GameTooltip:SetText(this.tooltipText, nil, nil, nil, nil, 1);
			</OnEnter>
			<OnLeave>
				GameTooltip:Hide();
			</OnLeave>
		</Scripts>
		<FontString inherits="ChatFontNormal"/>
	</EditBox>
	<Frame name="DoTimerMenuFrame" hidden="true" parent="UIParent" enableMouse="true" movable="true" frameStrata="DIALOG">
		<TitleRegion setAllPoints="true"/>
		<Size>
			<AbsDimension x="550" y="465"/>
		</Size>
		<Anchors> 
			<Anchor point="CENTER"/>
		</Anchors>
		<Layers>
			<Layer level="BACKGROUND">
				<FontString name="$parentTitle" inherits="GameFontHighlight" text="DoTimer Main Menu">
					<Anchors>
						<Anchor point="BOTTOMLEFT" relativePoint="TOPLEFT">
							<Offset>
								<AbsDimension x="9" y="0"/>
							</Offset>
						</Anchor>
					</Anchors>
				</FontString>
			</Layer>
		</Layers>
		<Backdrop bgFile="Interface\Tooltips\UI-Tooltip-Background" edgeFile="Interface\Tooltips\UI-Tooltip-Border" tile="true">
			<EdgeSize>
				<AbsValue val="16"/>
			</EdgeSize>
			<TileSize>
				<AbsValue val="16"/>
			</TileSize>
			<BackgroundInsets>
				<AbsInset left="5" right="5" top="5" bottom="5"/>
			</BackgroundInsets>
		</Backdrop>
		<Frames>
			<Slider name="DoTimerScaleSlider" inherits="DoTimerSliderTemplate">
				<Anchors>
					<Anchor point="TOP" relativePoint="TOP">
						<Offset>
							<AbsDimension x="0" y="-20"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad> 
						this.tooltipText = "Changes the relative size of the interface, default value: 1.";
						DoTimerScaleSliderText:SetText("Scale"); 
						DoTimerScaleSliderLow:SetText(".5"); 
						DoTimerScaleSliderHigh:SetText("1.5"); 
						this:SetMinMaxValues(.5,1.5); 
						this:SetValueStep(.05);		
					</OnLoad>
				</Scripts>
			</Slider>
			<Slider name="DoTimerButtonScaleSlider" inherits="DoTimerSliderTemplate">
				<Anchors>
					<Anchor point="TOPLEFT" relativePoint="TOPLEFT" relativeTo="DoTimerScaleSlider">
						<Offset>
							<AbsDimension x="0" y="-40"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad> 
						this.tooltipText = "Changes the relative size of the debuff icons of the interface, default value: 1.";
						DoTimerButtonScaleSliderText:SetText("Button Scale"); 
						DoTimerButtonScaleSliderLow:SetText(".5"); 
						DoTimerButtonScaleSliderHigh:SetText("1.5"); 
						this:SetMinMaxValues(.5,1.5); 
						this:SetValueStep(.05);		
					</OnLoad>
				</Scripts>
			</Slider>
			<Slider name="DoTimerMaxTargetsSlider" inherits="DoTimerSliderTemplate">
				<Anchors>
					<Anchor point="TOPLEFT" relativePoint="TOPLEFT" relativeTo="DoTimerButtonScaleSlider">
						<Offset>
							<AbsDimension x="0" y="-40"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad> 
						this.tooltipText = "Sets the maximum number of target tables that can be shown, default value: 5.";
						DoTimerMaxTargetsSliderText:SetText("Max Targets"); 
						DoTimerMaxTargetsSliderLow:SetText("1"); 
						DoTimerMaxTargetsSliderHigh:SetText("10"); 
						this:SetMinMaxValues(1,10); 
						this:SetValueStep(1);		
					</OnLoad>
				</Scripts>
			</Slider>
			<Slider name="DoTimerMaxDebuffsSlider" inherits="DoTimerSliderTemplate">
				<Anchors>
					<Anchor point="TOPLEFT" relativePoint="TOPLEFT" relativeTo="DoTimerMaxTargetsSlider">
						<Offset>
							<AbsDimension x="0" y="-40"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad> 
						this.tooltipText = "Sets the maximum number of debuffs per target table that can be shown, default value: 8.";
						DoTimerMaxDebuffsSliderText:SetText("Max Debuffs"); 
						DoTimerMaxDebuffsSliderLow:SetText("1"); 
						DoTimerMaxDebuffsSliderHigh:SetText("20"); 
						this:SetMinMaxValues(1,20); 
						this:SetValueStep(1);		
					</OnLoad>
				</Scripts>
			</Slider>
			<Slider name="DoTimerFormatSlider" inherits="DoTimerSliderTemplate">
				<Anchors>
					<Anchor point="TOPLEFT" relativePoint="TOPLEFT" relativeTo="DoTimerMaxDebuffsSlider">
						<Offset>
							<AbsDimension x="0" y="-40"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad> 
						this.tooltipText = "Determines if the timers will be displayed as bars or icons, default icons.";
						DoTimerFormatSliderText:SetText("Timer Format"); 
						DoTimerFormatSliderLow:SetText("bars"); 
						DoTimerFormatSliderHigh:SetText("icons"); 
						this:SetMinMaxValues(1,2); 
						this:SetValueStep(1);		
						this.values = {[1] = "bars",[2] = "icons",["bars"] = 1,["icons"] = 2}
					</OnLoad>
					<OnValueChanged> DoTimerFormatSliderValue:SetText(this.values[this:GetValue()]); </OnValueChanged>
				</Scripts>
			</Slider>
			<Slider name="DoTimerTargetLayoutSlider" inherits="DoTimerSliderTemplate">
				<Anchors>
					<Anchor point="TOPLEFT" relativePoint="TOPLEFT" relativeTo="DoTimerFormatSlider">
						<Offset>
							<AbsDimension x="0" y="-40"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad> 
						this.tooltipText = "Sets the direction in which new target tables are added, default value: left.";
						DoTimerTargetLayoutSliderText:SetText("Target Layout"); 
						DoTimerTargetLayoutSliderLow:SetText("up"); 
						DoTimerTargetLayoutSliderHigh:SetText("right"); 
						this:SetMinMaxValues(1,4); 
						this:SetValueStep(1);	
						this.values = {[1] = "up",[2] = "down",[3] = "left",[4] = "right",["up"] = 1,["down"] = 2,["left"] = 3,["right"] = 4,}
					</OnLoad>
					<OnValueChanged> DoTimerTargetLayoutSliderValue:SetText(this.values[this:GetValue()]); </OnValueChanged>
				</Scripts>
			</Slider>
			<Slider name="DoTimerDebuffLayoutSlider" inherits="DoTimerSliderTemplate">
				<Anchors>
					<Anchor point="TOPLEFT" relativePoint="TOPLEFT" relativeTo="DoTimerTargetLayoutSlider">
						<Offset>
							<AbsDimension x="0" y="-40"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad> 
						this.tooltipText = "Sets the direction in which new debuff icons are added, default value: down.";
						DoTimerDebuffLayoutSliderText:SetText("Debuff Layout"); 
						DoTimerDebuffLayoutSliderLow:SetText("up"); 
						DoTimerDebuffLayoutSliderHigh:SetText("right"); 
						this:SetMinMaxValues(1,4); 
						this:SetValueStep(1);	
						this.values = {[1] = "up",[2] = "down",[3] = "left",[4] = "right",["up"] = 1,["down"] = 2,["left"] = 3,["right"] = 4,}
					</OnLoad>
					<OnValueChanged> DoTimerDebuffLayoutSliderValue:SetText(this.values[this:GetValue()]); </OnValueChanged>
				</Scripts>
			</Slider>
			<Slider name="DoTimerDebuffSortSlider" inherits="DoTimerSliderTemplate">
				<Anchors>
					<Anchor point="TOPLEFT" relativePoint="TOPLEFT" relativeTo="DoTimerDebuffLayoutSlider">
						<Offset>
							<AbsDimension x="0" y="-40"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad> 
						this.tooltipText = "Sets the manner in which debuffs are sorted: time added or time remaining, default value: remaining.";
						DoTimerDebuffSortSliderText:SetText("Debuff Sort"); 
						DoTimerDebuffSortSliderLow:SetText("added"); 
						DoTimerDebuffSortSliderHigh:SetText("remaining"); 
						this:SetMinMaxValues(1,2); 
						this:SetValueStep(1);	
						this.values = {[1] = "added",[2] = "remaining",["added"] = 1,["remaining"] = 2,}
					</OnLoad>
					<OnValueChanged> DoTimerDebuffSortSliderValue:SetText(this.values[this:GetValue()]); </OnValueChanged>
				</Scripts>
			</Slider>
			<Slider name="DoTimerBarLengthSlider" inherits="DoTimerSliderTemplate">
				<Anchors>
					<Anchor point="TOPLEFT" relativePoint="TOPLEFT" relativeTo="DoTimerDebuffSortSlider">
						<Offset>
							<AbsDimension x="0" y="-40"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad> 
						this.tooltipText = "Determines how long the timer bars are, default 150.";
						DoTimerBarLengthSliderText:SetText("Bar Length"); 
						DoTimerBarLengthSliderLow:SetText("50"); 
						DoTimerBarLengthSliderHigh:SetText("250"); 
						this:SetMinMaxValues(50,250); 
						this:SetValueStep(5);	
					</OnLoad>
				</Scripts>
			</Slider>
			<Editbox name="DoTimerDebugEditBox" inherits="DoTimerEditBoxTemplate">
				<Anchors>
					<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="DoTimerBarLengthSlider">
						<Offset>
							<AbsDimension x="0" y="-10"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad> 
						this.text = ""
						this.tooltipText = "Sets debug messages.  \"off\" for none, \"on\" for default frame, or a number representing the chat frame to send the messages." 
						DoTimerDebugEditBoxText:SetText("Debugging"); 
					</OnLoad>
				</Scripts>
			</Editbox>
			<Editbox name="DoTimerPreventImmolEditBox" inherits="DoTimerEditBoxTemplate">
				<Anchors>
					<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="DoTimerDebugEditBox">
						<Offset>
							<AbsDimension x="0" y="0"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad> 
						this.text = ""
						this.tooltipText = "Sets on which mobs immolate will be ignored in the macro functions.  Press ENTER after typing in a name to add it to the list, or ESCAPE to remove it.  Current List:" 
						DoTimerPreventImmolEditBoxText:SetText("Prevent Immolate"); 
					</OnLoad>
					<OnEnter>
						local text = this.tooltipText
						for index,value in pairs(DoTimer_Settings.preventimmol) do text = text.."\n"..index end
						GameTooltip:SetOwner(this,"ANCHOR_RIGHT")
						GameTooltip:SetText(text,nil,nil,nil,nil,1)
						GameTooltip:Show()
					</OnEnter>
					<OnEscapePressed>
						local text = this:GetText()
						if text then DoTimer_Settings.preventimmol[text] = nil end
						this:ClearFocus()
					</OnEscapePressed>
					<OnEnterPressed>
						local text = this:GetText()
						if text then DoTimer_Settings.preventimmol[text] = 1 end
						this:ClearFocus()
					</OnEnterPressed>
				</Scripts>
			</Editbox>
			<Editbox name="DoTimerLifeTapEditBox" inherits="DoTimerEditBoxTemplate">
				<Anchors>
					<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="DoTimerPreventImmolEditBox">
						<Offset>
							<AbsDimension x="0" y="0"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad> 
						this.text = ""
						this.tooltipText = "Sets the rank of Life Tap to be used with the mana check feature.  Enter a number for a specific rank, or \"max\" for the max rank, whatever it is, default value: max." 
						DoTimerLifeTapEditBoxText:SetText("Life Tap Rank"); 
					</OnLoad>
				</Scripts>
			</Editbox>
			<CheckButton name="DoTimerEnabledCheckButton" inherits="DoTimerCheckButtonTemplate">
				<Anchors>
					<Anchor point="TOPLEFT" relativePoint="TOPLEFT">
						<Offset>
							<AbsDimension x="10" y="-10"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad> 
						this.tooltipText = "Turns the addon on or off, default state: on.";
						DoTimerEnabledCheckButtonText:SetText("Enabled"); 
					</OnLoad>
				</Scripts>
			</CheckButton>
			<CheckButton name="DoTimerVisibleCheckButton" inherits="DoTimerCheckButtonTemplate">
				<Anchors>
					<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT"  relativeTo="DoTimerEnabledCheckButton">
						<Offset>
							<AbsDimension x="0" y="-4"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad> 
						this.tooltipText = "Determines if timers will appear onscreen, default state: shown.";
						DoTimerVisibleCheckButtonText:SetText("Visible UI"); 
					</OnLoad>
				</Scripts>
			</CheckButton>
			<CheckButton name="DoTimerLockedCheckButton" inherits="DoTimerCheckButtonTemplate">
				<Anchors>
					<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT"  relativeTo="DoTimerVisibleCheckButton">
						<Offset>
							<AbsDimension x="0" y="-4"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad> 
						this.tooltipText = "Locks the addon, hiding the drag icon, default state: unlocked.";
						DoTimerLockedCheckButtonText:SetText("Locked"); 
					</OnLoad>
				</Scripts>
			</CheckButton>
			<CheckButton name="DoTimerNamesCheckButton" inherits="DoTimerCheckButtonTemplate">
				<Anchors>
					<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="DoTimerLockedCheckButton">
						<Offset>
							<AbsDimension x="0" y="-4"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad> 
						this.tooltipText = "Toggles the showing of target names, default state: shown.";
						DoTimerNamesCheckButtonText:SetText("Showing Target Names"); 
					</OnLoad>
				</Scripts>
			</CheckButton>
			<CheckButton name="DoTimerLevelsCheckButton" inherits="DoTimerCheckButtonTemplate">
				<Anchors>
					<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="DoTimerNamesCheckButton">
						<Offset>
							<AbsDimension x="0" y="-4"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad> 
						this.tooltipText = "Toggles the showing of target levels next to their names, default state: shown.";
						DoTimerLevelsCheckButtonText:SetText("Showing Target Levels"); 
					</OnLoad>
				</Scripts>
			</CheckButton>
			<CheckButton name="DoTimerExpAlertCheckButton" inherits="DoTimerCheckButtonTemplate">
				<Anchors>
					<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="DoTimerLevelsCheckButton">
						<Offset>
							<AbsDimension x="0" y="-4"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad> 
						this.tooltipText = "Determines if timer text turns red and the timer icon highlights for 2 seconds at less than 5 seconds remaining, default state: on.";
						DoTimerExpAlertCheckButtonText:SetText("Expiration Alerts"); 
					</OnLoad>
				</Scripts>
			</CheckButton>
			<CheckButton name="DoTimerClickableCheckButton" inherits="DoTimerCheckButtonTemplate">
				<Anchors>
					<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="DoTimerExpAlertCheckButton">
						<Offset>
							<AbsDimension x="0" y="-4"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad> 
						this.tooltipText = "Determines if debuffs can be clicked: click to target, shift+click to remove, control+click to make ghost timer, default state: on.";
						DoTimerClickableCheckButtonText:SetText("Clickable Debuffs"); 
					</OnLoad>
				</Scripts>
			</CheckButton>
			<CheckButton name="DoTimerDepCheckButton" inherits="DoTimerCheckButtonTemplate">
				<Anchors>
					<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="DoTimerClickableCheckButton">
						<Offset>
							<AbsDimension x="0" y="-4"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad> 
						this.tooltipText = "Determines if debuffs will become depreciated if the addon can't find them on the target, default state: on.";
						DoTimerDepCheckButtonText:SetText("Depreciated Timers"); 
					</OnLoad>
				</Scripts>
			</CheckButton>
			<CheckButton name="DoTimerProbableCheckButton" inherits="DoTimerCheckButtonTemplate">
				<Anchors>
					<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="DoTimerDepCheckButton">
						<Offset>
							<AbsDimension x="0" y="-4"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad> 
						this.tooltipText = "Determines if the macro functions will include depreciated timers in their scans, default state: on.";
						DoTimerProbableCheckButtonText:SetText("Include Probable Timers"); 
					</OnLoad>
				</Scripts>
			</CheckButton>
			<CheckButton name="DoTimerManaCheckButton" inherits="DoTimerCheckButtonTemplate">
				<Anchors>
					<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="DoTimerProbableCheckButton">
						<Offset>
							<AbsDimension x="0" y="-4"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad> 
						this.tooltipText = "Determines if Life Tap will be cast automatically if you don't have the mana for the attempted spell, default state: off.";
						DoTimerManaCheckButtonText:SetText("Mana Check"); 
					</OnLoad>
				</Scripts>
			</CheckButton>
			<CheckButton name="DoTimerOnlyTargetCheckButton" inherits="DoTimerCheckButtonTemplate">
				<Anchors>
					<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="DoTimerManaCheckButton">
						<Offset>
							<AbsDimension x="0" y="-4"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad> 
						this.tooltipText = "Determines if only timers for your current target will be shown (the others will be tracked, but hidden), default state: off.";
						DoTimerOnlyTargetCheckButtonText:SetText("Show Only Target"); 
					</OnLoad>
				</Scripts>
			</CheckButton>
			<CheckButton name="DoTimerPlaySoundsCheckButton" inherits="DoTimerCheckButtonTemplate">
				<Anchors>
					<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="DoTimerOnlyTargetCheckButton">
						<Offset>
							<AbsDimension x="0" y="-4"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad> 
						this.tooltipText = "Determines if a sound will be played when a timer hits five seconds left, default state: off.";
						DoTimerPlaySoundsCheckButtonText:SetText("Play Sounds"); 
					</OnLoad>
				</Scripts>
			</CheckButton>
			<Button name="DoTimerResetButton" inherits="DoTimerButtonTemplate">
				<Anchors>
					<Anchor point="TOPRIGHT" relativePoint="TOPRIGHT">
						<Offset>
							<AbsDimension x="-10" y="-10"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad> 
						this.tooltipText = "Resets all settings to their default value." 
						DoTimerResetButtonText:SetText("Reset"); 
					</OnLoad>
					<OnClick> DoTimer_Commands("reset"); </OnClick>
				</Scripts>
			</Button>
			<Button name="DoTimerResetPositionButton" inherits="DoTimerButtonTemplate">
				<Anchors>
					<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="DoTimerResetButton">
						<Offset>
							<AbsDimension x="0" y="-10"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad> 
						this.tooltipText = "Resets the position of the drag icon to the middle of the screen." 
						DoTimerResetPositionButtonText:SetText("Reset Position"); 
					</OnLoad>
					<OnClick> DoTimer_Commands("reset position"); </OnClick>
				</Scripts>
			</Button>
			<Button name="DoTimerOtherCommandsButton" inherits="DoTimerButtonTemplate">
				<Anchors>
					<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="DoTimerResetPositionButton">
						<Offset>
							<AbsDimension x="0" y="-10"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad> 
						this.tooltipText = "Prints in the chat frame all commands not available to the menu." 
						DoTimerOtherCommandsButtonText:SetText("Other Cmds"); 
					</OnLoad>
					<OnClick> DoTimer_Commands("help other cmds"); </OnClick>
				</Scripts>
			</Button>
			<Button name="DoTimerAuthorInfoButton" inherits="DoTimerButtonTemplate">
				<Anchors>
					<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="DoTimerOtherCommandsButton">
						<Offset>
							<AbsDimension x="0" y="-10"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad> 
						this.tooltipText = "Prints in the chat frame information about the current version and about the author." 
						DoTimerAuthorInfoButtonText:SetText("Author Info"); 
					</OnLoad>
					<OnClick> DoTimer_Commands("help version"); </OnClick>
				</Scripts>
			</Button>
			<Button name="DoTimerInformationButton" inherits="DoTimerButtonTemplate">
				<Anchors>
					<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="DoTimerAuthorInfoButton">
						<Offset>
							<AbsDimension x="0" y="-10"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad> 
						this.tooltipText = "Prints in the chat frame information about some of this mod's features." 
						DoTimerInformationButtonText:SetText("Information"); 
					</OnLoad>
					<OnClick> DoTimer_Commands("help info"); </OnClick>
				</Scripts>
			</Button>
			<Button name="DoTimerBeginnerButton" inherits="DoTimerButtonTemplate">
				<Anchors>
					<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="DoTimerInformationButton">
						<Offset>
							<AbsDimension x="0" y="-10"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad> 
						this.tooltipText = "Prints in the chat frame basic info about the mod, for beginners." 
						DoTimerBeginnerButtonText:SetText("Beginners"); 
					</OnLoad>
					<OnClick> DoTimer_Commands("help new"); </OnClick>
				</Scripts>
			</Button>
			<Button name="DoTimerExampleMacrosButton" inherits="DoTimerButtonTemplate">
				<Anchors>
					<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="DoTimerBeginnerButton">
						<Offset>
							<AbsDimension x="0" y="-10"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad> 
						this.tooltipText = "Prints in the chat frame some example macros using the macro functions provided by this mod." 
						DoTimerExampleMacrosButtonText:SetText("Example Macros"); 
					</OnLoad>
					<OnClick> DoTimer_Commands("help macros"); </OnClick>
				</Scripts>
			</Button>
			<CheckButton name="DoTimerSepGhostCheckButton" inherits="DoTimerCheckButtonTemplate">
				<Anchors>
					<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="DoTimerExampleMacrosButton">
						<Offset>
							<AbsDimension x="0" y="-10"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad> 
						this.tooltipText = "Determines if ghost timers will be separated a bit from other timers, default state: on.";
						DoTimerSepGhostCheckButtonText:SetText("Sep. Ghosts"); 
					</OnLoad>
				</Scripts>
			</CheckButton>			
			<CheckButton name="DoTimerAllGhostCheckButton" inherits="DoTimerCheckButtonTemplate">
				<Anchors>
					<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="DoTimerSepGhostCheckButton">
						<Offset>
							<AbsDimension x="0" y="-4"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad> 
						this.tooltipText = "Determines if ghost timers will automatically be created and removed, default state: off.";
						DoTimerAllGhostCheckButtonText:SetText("Auto Ghosts"); 
					</OnLoad>
				</Scripts>
			</CheckButton>
			<CheckButton name="DoTimerForceConflagCheckButton" inherits="DoTimerCheckButtonTemplate">
				<Anchors>
					<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="DoTimerAllGhostCheckButton">
						<Offset>
							<AbsDimension x="0" y="-4"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad> 
						this.tooltipText = "Determines if conflagrate will be cast instead of immolate for its ghost timer, or Swiftmend for Rejuvenation, default state: off.";
						DoTimerForceConflagCheckButtonText:SetText("Ghost Conflag"); 
					</OnLoad>
				</Scripts>
			</CheckButton>		
			<Button name="DoTimerDoneButton" inherits="DoTimerButtonTemplate">
				<Anchors>
					<Anchor point="BOTTOMRIGHT" relativePoint="BOTTOMRIGHT">
						<Offset>
							<AbsDimension x="-10" y="10"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad> 
						this.tooltipText = "Closes the menu and applies all changes made." 
						DoTimerDoneButtonText:SetText("Done"); 
					</OnLoad>
					<OnClick> DoTimer_ParseMenuData(); DoTimerMenuFrame:Hide(); </OnClick>
				</Scripts>
			</Button>
			<Button name="DoTimerCancelButton" inherits="DoTimerButtonTemplate">
				<Anchors>
					<Anchor point="BOTTOMLEFT" relativePoint="TOPLEFT" relativeTo="DoTimerDoneButton">
						<Offset>
							<AbsDimension x="0" y="10"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad> 
						this.tooltipText = "Closes the window without making any changes." 
						DoTimerCancelButtonText:SetText("Cancel"); 
					</OnLoad>
					<OnClick> DoTimerMenuFrame:Hide(); </OnClick>
				</Scripts>
			</Button>
			<Button name="DoTimerApplyButton" inherits="DoTimerButtonTemplate">
				<Anchors>
					<Anchor point="BOTTOMLEFT" relativePoint="TOPLEFT" relativeTo="DoTimerCancelButton">
						<Offset>
							<AbsDimension x="0" y="10"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad> 
						this.tooltipText = "Applies all changes made without closing the window." 
						DoTimerApplyButtonText:SetText("Apply"); 
					</OnLoad>
					<OnClick> DoTimer_ParseMenuData(); </OnClick>
				</Scripts>
			</Button>
		</Frames>
		<Scripts>
			<OnLoad>
				this:SetBackdropBorderColor(0.4, 0.4, 0.4);
				this:SetBackdropColor(0.5, 0.5, 0.5);
				table.insert(UISpecialFrames,"DoTimerMenuFrame")
			</OnLoad>
			<OnShow> DoTimer_SetMenuData(); </OnShow>
		</Scripts>
	</Frame>
</Ui>