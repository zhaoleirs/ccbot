<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<html>
<head>
<meta name="GENERATOR" content="PageBreeze Free HTML Editor (http://www.pagebreeze.com)">
<title>Flex Bar Commands</title>
</head>
<body bgcolor="#ffffff">
<p>
<table cellspacing="0" cellpadding="3" width="100%" align="center" border="1" bordercolor="#000000">
  <caption><font size="2"><strong>Complete 
  FlexBar Command List</strong> </font>   </caption><tr><td>
      <p align="center"><strong><font 
      size=2>Appearance Commands</font></strong></p></td></tr>
  <tr>
    <td width="100%">
      <p><strong><font size="2">VERY 
      IMPORTANT NOTES ON COMMANDS:</font></strong></p>
      <ol>
        <li><font size="2">Square brackets denote an optional 
        parameter.&nbsp; The brackets are not entered on the command line.&nbsp; 
        IE: /flexbar hide button=1 always hides button 1, /flexbar hide button=1 
        toggle=     
                  
          'true' hides itif it's shown, shows it if it's 
        hidden.           
        <li><font size="2">Parameter values come in 2 main 
        types: Number and string.&nbsp; For numbers simply type 
        &lt;parameter&gt;=&lt;number&gt;&nbsp; IE: button=1&nbsp; For strings, 
        enclose them in single quotes&nbsp; IE: on='GainAura'&nbsp; Some 
        parameters can take multiple values.&nbsp; For numbers you can enter a 
        range IE: button=1-4 results in buttons 1, 2, 3 and 4 being done.&nbsp; For both strings and 
        numbers you can enter it as 
        aset&nbsp; IE: button=   
           [1 2] or target=  
           ['hostile' 'neutral'].&nbsp; Currently there is no way to 
        combine strings and numbers[1 'hostile'] (nor any reason to in the code),&nbsp; Nor 
        is there a way to combine ranges and numbers (so [1-3 5] will 
        not   work).     
                     
                      
             
        <li><font size="2">For many commands both button and 
        group appear optional.&nbsp; This is misleading - in the case of both 
        being present, ONE OR THE OTHER must be entered. </font>        
                    
               
        <li><font size="2">My original parser didn't handle 
        decimals, so number values are often in tenths:&nbsp; scale=5 is 
        actually half size, color=       
        [10 1 1] is dark red, in=  50 will delay 
        5      seconds.     
        <li><font size="2">if you see 
        something like target=     
          &lt;target&gt;that just means that the parameter may be either 
        a string or a number, depending on context - it does not mean put &lt; 
        and &gt; around the      value. 
                      
                      
        
        <li><font size="2">You can put a single quote in a 
        string by escaping it with 
        a&nbsp;\&nbsp;EG:&nbsp;if='UnitDebuff&lt;["target" "Hunter\'s 
        Mark"]&gt;' or Macro=            '/echo 
        Dhargo\'s  
          Test's  </li></ol></font></font></font></font></font></td></tr>
<tr><td width="100%"><font 
      size=2><strong>/flexbar show [button=#] [group=#] 
      [toggle= 'true'] [on='event'] [target=&lt;target&gt;] [if='condition'] [in=#] 
      [tname=  &lt;timername&gt;] [ttoggle=  
      'true']</font></strong></td></tr><tr><td><font size="2">Show the buttons or group 
      specified</font></td></tr>
<tr><td width="100%"><font 
      size=2><strong>/flexbar hide [button=#] [group=#] 
      [toggle= 'true'] [on='event'] [target=&lt;target&gt;] [if='condition'] [in=#] 
      [tname=  &lt;timername&gt;] [ttoggle=  
      'true']</font></strong></td></tr><tr><td><font size="2">Hide the buttons or group 
      specified</font></td></tr>
<tr><td width="100%"><font 
      size=2><strong>/flexbar scale [button=   #] [group=#] scale= # [toggle=  #][reset='true'=] [on= 'event'] [target= 
      &lt;target&gt;][if='condition'] [in=#] [tname=  
      &lt;timername&gt;] [ttoggle=  'true']</font></strong></td></tr><tr><td><font size="2">Scale the buttons by scale.&nbsp; 
      Scale is a number from 5-50 (half size to 5X size)&nbsp; If toggle is 
      included, and the button is already the size you are trying to make it, it 
      will become the size in toggle.&nbsp; So, /flexbar scale button=1 scale=5 
      toggle=20 will make the button half size, unless it's already half size, 
      then it will become 2X size.&nbsp; If reset is 'true' then the button will 
      return to normal size.</font></td></tr>
<tr><td width="100%"><font 
      size=2><strong>/flexbar shade [button=#] [group= #] color= [## #]&nbsp;[toggle= [###]][reset='true'= ] [on= 'event'] [target= 
      &lt;target&gt;][if='condition'] [iftarg=] [in=#] 
      [tname=  &lt;timername&gt;] [ttoggle=  
      'true']</font></strong></td></tr><tr><td><font size="2">Shades the button with the color 
      specified.&nbsp; The color must be a red/green/blue set surrounded by 
      brackets.&nbsp; Each element can range from 0-10&nbsp;- IE /flexbar shade 
      button=1 color=[10 1 1] will apply a dark red tint to the button.&nbsp; A 
      color like [5 5 5] will just dim the button.&nbsp; If toggle is specified, 
      and the button is already the color in color= then it will become the 
      color in toggle=&nbsp; While setting the color to [10 10 10] will seem to 
      restore it to normal, it will override any mana/range type shading that 
      FlexBar can do automatically.&nbsp; To restore this functionaliyt use 
      reset='true'</font></td></tr>
<tr><td width="100%"><font 
      size=2><strong>/flexbar fade [button=   #] [group=#] alpha= # [toggle= #] [on='event'] [target= &lt;target&gt;] [if='condition'] 
      [in=#] [tname= &lt;timername&gt;] [ttoggle= 
        'true']</font></strong></td></tr><tr><td><font size="2">Adjusts the alpha (transparency) of 
      the button.&nbsp; Alpha can ange from 1 (nearly invisible) to 10.&nbsp; If 
      toggle is specified, then if the button is already the specified alpha, it 
      will become the alpha in toggle.&nbsp; IE /flexbar fade button=1 alpha=1 
      will always make a button nearly invisible, /flexbar shade button=1 
      alpha=1 toggle=10 will make it nearly invisible if it's not, otherwise 
      make it fully visible again.</font></td></tr>
<tr><td width="100%"><font 
      size=2><strong>/flexbar text [button=#] [group=#] 
      [text= 'text'] [on='event'] [target=&lt;target&gt;] [if='condition'] [in=#] 
      [tname=  &lt;timername&gt;] [ttoggle=  
      'true']</font></strong></td></tr><tr><td><font size="2">FlexBar buttons have 3 text 
      attributes you can modify to display information.&nbsp; The first defaults 
      to the top right corner.&nbsp; /flexbar text button=1 text='Hi' will set 
      that text to "Hi".&nbsp; There are a number of special values that text 
      can be set to:&nbsp; %c will display the cooldown of the spell on the 
      button, %b will display the hotkey assigned to the button and %d will 
      display the button number.&nbsp; Furthermore there is a whole slew of 
      special, dynamic variables it can be -- please see the appendix "Text 
      Substitutions" for a full list.</font></td></tr>
<tr><td width="100%"><font 
      size=2><strong>/flexbar text2 [button=#] [group=#] 
      [text= 'text'] [on='event'] [target=&lt;target&gt;] [if='condition'] [in=#] 
      [tname=  &lt;timername&gt;] [ttoggle=  
      'true']</font></strong></td></tr><tr><td><font size="2">FlexBar buttons have 3 text 
      attributes you can modify to display information.&nbsp; The&nbsp;second 
      defaults to the&nbsp;bottom right corner.&nbsp; /flexbar text2 button=1 
      text='Hi' will set that text to "Hi".&nbsp; There are a number of special 
      values that text can be set to:&nbsp; %c will display the cooldown of the 
      spell on the button, %b will display the hotkey assigned to the button and 
      %d will display the button number.&nbsp; Furthermore there is a whole slew 
      of special, dynamic variables it can be -- please see the appendix "Text 
      Substitutions" for a full list.</font></td></tr>
  <tr>
    <td width="100%"><strong><font size="2">/flexbar text3 [button=#] [group=#] 
      [text='text'] [on='event'] [target=&lt;target&gt;] [if='condition'] [in=#] 
      [tname=&lt;timer name&gt;] [ttoggle='true']</font></strong></td></tr>
  <tr>
    <td width="100%"><font size="2">FlexBar buttons have 3 text attributes you 
      can modify to display information.&nbsp; The&nbsp;third defaults to 
      the&nbsp;center.&nbsp; /flexbar text3 button=1 text='Hi' will set that 
      text to "Hi".&nbsp; There are a number of special values that text can be 
      set to:&nbsp; %c will display the cooldown of the spell on the button, %b 
      will display the hotkey assigned to the button and %d will display the 
      button number.&nbsp; Furthermore there is a whole slew of special, dynamic 
      variables it can be -- please see the appendix "Text Substitutions" for a 
      full list.</font></td></tr>
<tr><td width="100%"><font 
      size=2><strong>/flexbar justifytext [button=#] [group=#] 
      [pos= &lt;position&gt;] [on='event'] [target=&lt;target&gt;] [if='condition'] 
      [in=#] [tname=  &lt;timername&gt;] 
      [ttoggle=  'true']</font></strong></td></tr><tr><td><font size="2">Both text attributes can be move to 
      one of nine spots on the button - 'topleft', 'top', 'topright', 'right', 
      'bottomright', 'bottom', 'bottomleft', 'left' and 'center'.&nbsp; IE 
      /flexbar justifytext button=1 pos='topleft' will move it to the top left 
      of the button and justify it left, /flexbar justifytext button=1 pos='top' 
      will center it on the top of the button and so on.</font></td></tr>
<tr><td width="100%"><font 
      size=2><strong>/flexbar justifytext2 [button=#] [group=#] 
      [pos= ] [on='event'] [target=&lt;target&gt;] [if='condition'] [in=#] 
      [tname=  &lt;timername&gt;] [ttoggle=  
      'true']</font></strong></td></tr><tr><td><font size="2">Both text attributes can be move to 
      one of nine spots on the button - 'topleft', 'top', 'topright', 'right', 
      'bottomright', 'bottom', 'bottomleft', 'left' and 'center'.&nbsp; IE 
      /flexbar justifytext2 button=1 pos='topleft' will move it to the top left 
      of the button and justify it left, /flexbar justifytext2 button=1 
      pos='top' will center it on the top of the button and so on.</font></td></tr>
<tr><td width="100%"><font 
      size=2><strong>/flexbar shadetext [button=#] [group= #] 
      color= [## #]&nbsp;[toggle= [###]][reset='true'= ] [on= 'event'] 
      [target= &lt;target&gt;][if='condition'] [iftarg=] 
      [in=#] [tname=  &lt;timername&gt;] [ttoggle= 
       'true']</font></strong></td></tr><tr><td><font size="2">Both text attributes can be shaded - 
      this works just like shading the whole button.&nbsp; Please see /flexbar 
      shade for details.</font></td></tr>
<tr><td width="100%"><font 
      size=2><strong>/flexbar shadetext2 
      [button= #] [group= #] color=  [toggle=  
      'true'][reset= 'true'= ]  [on=    'event'] [target= 
      &lt;target&gt;][if='condition'] [iftarg=] [in=#] 
      [tname=  &lt;timername&gt;] [ttoggle=  
      'true']</font></strong></td></tr><tr><td><font size="2">Both text attributes can be shaded - 
      this works just like shading the whole button.&nbsp; Please see /flexbar 
      shade for details.</font></td></tr>
<tr><td width="100%"><font 
      size=2><strong>/flexbar showgrid [button=#] [group=  #] [toggle= 
  'true']</font></strong></td></tr><tr><td><font size="2">If showgrid is turned on, the button 
      is displayed even if it is empty.&nbsp; If toggle is true and showgrid is 
      on, then it is turned off, otherwise it is turned on</font></td></tr>
<tr><td width="100%"><font 
      size=2><strong>/flexbar hidegrid [button=#] [group=  #] [toggle= 
  'true']</font></strong></td></tr><tr><td><font size="2">If Hidegrid is turned on, the button 
      is only displayed if it has an action on it, if it doesn't then the button 
      is hidden.&nbsp; Again, if toggle is true then it switches between 
      showgrid and hidegrid.</font></td></tr>
  <tr>
    <td width="100%">
      <p align="center"><font size="2">Movement 
      Commands</font></p></td></tr>
<tr><td width="100%"><font 
      size=2><strong>/flexbar lock [button= 
      #]  [group= #]</font></strong></td></tr><tr><td><font size="2">Lock a button to avoid accidentally 
      moving it.&nbsp; IE /flexbar lock button=1</font></td></tr>
<tr><td width="100%"><font 
      size=2><strong>/flexbar unlock [button= 
      #]  [group= #]</font></strong></td></tr><tr><td><font size="2">Unlock a button again to move 
      it.&nbsp; Note:&nbsp; You cannot unlock buttons in a group except the 
      group anchor.</font></td></tr>
<tr><td width="100%"><font 
      size=2><strong>/flexbar moveabs button=   # xx=# yy= # [on= 'event'] [target=&lt;target&gt;] [if= 'condition'] [in=#] 
      [tname=  &lt;timername&gt;] [ttoggle=  
      'true']</font></strong></td></tr><tr><td><font size="2">Move a button to a location on the 
      screen.&nbsp; 0,0 is in the bottom left of the screen, and I am unsure as 
      to the exact dimensions of most desktops.&nbsp; Experimentation is in 
      order.&nbsp; Note - you can send it soaring off the screen never to be 
      seen again, and that may have adverse performance effects.&nbsp; Just use 
      /flexbar move button=1 xx=100 yy=100 to move it where you can get at it 
      again.&nbsp; The reference point on the button is the upper left 
      corner.&nbsp; So, /flexbar moveabs button=1 xx=0 yy=0 will hide it off the 
      bottom of the screen because the top left corner of the button will be in 
      the bottom left corner of the screen.</font></td></tr>
<tr><td width="100%"><font 
      size=2><strong>/flexbar moverel button= 
      # trgbtn=  #dx=  dy= [on= 'event'] 
      [target= &lt;target&gt;] [if=    'condition'] [in=#] 
      [tname= &lt;timername&gt;] [ttoggle= 'true']&lt;  
      /STRONG&gt;</font></strong></td></tr><tr><td><font size="2">Like moveabs, but it moves the button 
      to a spot relative to the button name in trgbtn=.&nbsp; IE /flexbar move 
      button=2 trgbtn=1 dx=38 dy=38 will move button 2 to sit just off the upper 
      right corner of button 1 (if UI scale and button scale are normal - if 
      they are not, dx/dy will need to change to give the same 
  effect)</font></td></tr>
<tr><td width="100%"><font 
      size=2><strong>/flexbar movetomouse button=# dx= dy= 
      [on= 'event'] [target=&lt;target&gt;] [if= 'condition'] [in=#] 
      [tname=  &lt;timername&gt;] [ttoggle=  
      'true']</font></strong></td></tr><tr><td><font size="2">Like moverel and moveabs but it 
      positions the button with respect to the current position of the mouse 
      cursor.&nbsp; IE /flexbar movetomouse button=1 dx=-19 dy=19 will center 
      button 1 on the mouse cursor (if UI scale and button scale are 
  1)</font></td></tr>
  <tr>
    <td width="100%">
      <p align="center"><font size="2">Group 
    Commands</font></p></td></tr>
<tr><td width="100%"><font 
      size=2><strong>/flexbar group button=  #  anchor=  # </font></strong></td></tr><tr><td><font size="2">Forms the specified buttons into a 
      group.&nbsp; The group may be moved/hidden/faded etc as a unit.&nbsp; 
      Anytime you specify group= in a command, it replaces the button list 
      (button=) with the members of the group.&nbsp; The anchor is going to be 
      the only button in the group with a handle to move it with (the rest will 
      be locked) and the group number will be the anchor button number.&nbsp; 
      The anchor button MUST be in the list of buttons in button=.&nbsp; 
      Currently the only way to add buttons to a group is to simply specify the 
      entire old group + the new buttons - IE:&nbsp; /flexbar group button=1-12 
      anchor=1 will form group #1 of 12 buttons (1-12).&nbsp; Moving button 1 
      will move all buttons.&nbsp; /flexbar group button=[1 2 3 4 5 6 7 8 9 10 
      11 12 15 16 17] anchor=1 will add buttons 15, 16 and 17 to the 
      group.&nbsp; I will eventually update my parser to allow button=[1-12 
      15-16] BUT IT DOES NOT SUPPORT THAT AS OF 1.37.</font></td></tr>
<tr><td width="100%"><font 
      size=2><strong> /flexbar 
ungroupgroup=  #</font></strong></td></tr><tr><td><font size="2">Disbands the named group</font></td></tr>
<tr><td width="100%"><font 
      size=2><strong> /flexbar 
    listgroups[group=  #]</font></strong></td></tr><tr><td><font size="2">If group is specified, lists the 
      buttons in the group.&nbsp; If group is not specified, it lists all the 
      groups.</font></td></tr>
<tr><td width="100%"><font 
      size=2><strong>/flexbar circlegroup group= 
      #  [padding= #]</font></strong></td></tr><tr><td><font size="2">1 of 3 auto-arrange commands.&nbsp; 
      Circlegroup tries to make a circle, starting at 10 O'clock and going 
      clockwise, with the 7th button in the middle.&nbsp; Limitation - This only 
      works with groups with 7 or less buttons.&nbsp; Padding is the space 
      between buttons.</font></td></tr>
<tr><td width="100%"><font 
      size=2><strong>/flexbar horizontalgroup group=# [padding=  #] [height= 
    #]</font></strong></td></tr><tr><td>
      <p><font size="2">2 of 3 auto-arrrange commands.&nbsp; 
      Horizontal group will make a horizontal bar out of the group.&nbsp; If the 
      optional height parameter is included, it will make the bar that many rows 
      high.&nbsp; However, be aware that the button numbers will go top-bottom 
      then left to right (which is counter-intuitive I agree, but too late to 
      fix I'm afraid as people are used to it).&nbsp;&nbsp; The optional padding 
      parameter is the space between buttons</font></p></td></tr>
<tr><td width="100%"><font 
      size=2><strong>/flexbar verticalgroup group=# [padding=  #] [width= 
  #]</font></strong></td></tr><tr><td><font size="2">3 of 3 auto-arrange commands.&nbsp; 
      Veritcal group makes a vertical bar out of the group.&nbsp; If the 
      optional width parameter is included, the bar will be that many columns 
      wide.&nbsp; Button number goes left to right, top to bottom.&nbsp; The 
      optional padding parameter is the amount of space between buttons.&nbsp; 
      Examples:&nbsp; /flexbar verticalgroup group=1&nbsp; will make a single 
      column bar out of group one.&nbsp; If group 1 has buttons 1-12 then 
      /flexbar verticalgroup group=1 width=6 will make a 6 button wide, 2 button 
      high bar numbered 1-6 across the top and 7-12 across the 
  bottom.</font></td></tr>
  <tr>
    <td width="100%">
      <p align="center"><font size="2">Miscellaneous 
      Commands</font></p></td></tr>
<tr><td width="100%"><font 
      size=2><strong>/flexbar remap [button=   #] [group=#] base= # [toggle=  'true'][reset='true'=] [on= 'event'] [target= 
      &lt;target&gt;][if='condition'] [in=#] [tname= 
       &lt;timername&gt;] [ttoggle=  
      'true']</font></strong></td></tr><tr><td>
      <p><font size="2">Remap is a very powerful, and slightly 
      confusing command.&nbsp; To understand Remap, you have to understand 
      buttons and ID's and their relationship:</font></p>
      <p><font size="2">One of a button's attributes is it's 
      ID (NOT ITS NUMBER - THEY CAN BE DIFFERENT).&nbsp; This ID is how WoW 
      identifies the action to be taken when you click it.&nbsp; Two buttons 
      with the same ID will have the same icon and take the same action when you 
      click them.&nbsp; Drag the action off one and it will dissappear from the 
      other, put something on one it will appear in the other.&nbsp; While many 
      flexbar attributes (including hotkey bindings)&nbsp;are attached to the 
      button - the action it performs is always about the ID.</font></p>
      <p><font size="2">Out of the box, the default ID of a 
      button is the same as it's number (as of 1.37 - prior to 1.37 there was 
      oddness in the mapping above button 73).&nbsp; To see a simple example of 
      remapping, look at the default action bar.&nbsp; It is only 12 buttons, 
      but they take on ID's 1-12 on page 1, 13-24 on page 2 through 61-72 on 
      page 6.&nbsp; WITH A SMALL EXCEPTION:&nbsp; Warriors, the first page takes 
      on ID's 73-84 if you're in battle stance, 85-96 if you're in defensive 
      stance and 97-108 if you're in berserker stance.&nbsp; Druids - page 1 is 
      1-12 in caster form, 83-96 in bear form and 97-108 in cat form.&nbsp; 
      Rogues, they remap to something above 73 on stealthing, 1-12 
      non-stealthed.</font></p>
      <p><font size="2">This is remapping - the buttons take 
      on new actions, but the hotkeys etc. stay the same (allowing you to use 
      the same hotkeys for different actions in different 
situations.)</font>             
                   
         </p>
      <p><font size="2">/flexbar remap will remap the buttons 
      specified with ID's starting at base=&nbsp; IE:&nbsp; /flexbar remap 
      button=1-12 base=13 will make button 1 have ID 13, button 2 have ID 14 
      through button 12 having ID 24.&nbsp; If you do this, you'll notice that dragging an action to button 1 
      alsoplaces it in button 13.&lt; /FONT&gt;    
                      
                    
         </p>
      <p><font size="2">While not particularly useful alone, 
      with events this is a mainstay for many classes (including warriors, 
      druids, rogues, hunters and priests).</font>            
              
    </p></font></td></tr>
<tr><td width="100%"><font 
      size=2><strong>/flexbar advanced [button=#] [group= #] 
      state=   &lt;'on'|  'off'&gt;  
      </font></strong></td></tr><tr><td><font size="2">When advanced mode is turned on 
      (/flexbar advanced button=1 state='on') only left clicks trigger the 
      action on the button.&nbsp; Right clicks do not.&nbsp; This is to allow 
      seperate functions on both rightclick and left click.&nbsp; Return it to 
      normal with /flexbar advanced button=1 state='off'</font></td></tr>
<tr><td width="100%"><font 
      size=2><strong>/flexbar disable [button=#] [group=#] 
      state=&lt;'on'&nbsp;| 'off'&gt; [toggle='true'] [on='event'] [target= 
      &lt;target&gt;] [if='condition'] [in=#] [tname= 
       &lt;timername&gt;] [ttoggle=  
      'true']</font></strong></td></tr><tr><td><font size="2">This will completely disable actions 
      from clicking on the button - some ingenius folks fond&nbsp;some neat 
      things to do with this.&nbsp; /flexbar disable&nbsp;button=1 
      state='off'&nbsp;returns it to normal.&nbsp;</font></td></tr>
<tr><td width="100%"><font 
      size=2><strong>/flexbar use button=# [on='event'] 
      [target= &lt;target&gt;] [if='condition'] [in=#] [tname= 
       &lt;timername&gt;] [ttoggle=  
      'true']</font></strong></td></tr><tr><td><font size="2">This command will attempt to click 
      the named buttons.&nbsp; VERY IMPORTANT - this can not be used on ANY 
      event but button clicks.&nbsp; This is a limitation of the WoW engine put 
      there to prevent bots.&nbsp; You can NOT use this to automatically recast 
      a buff when it wears off - that simply is not possible - 
  sorry.</font></td></tr>
<tr><td width="100%"><font 
      size=2><strong>/flexbar echo [button=   #] [group=#] base= # [toggle=  'true'][reset='true'=] [on= 'event'] [target= 
      &lt;target&gt;][if='condition'] [in=#] [tname= 
       &lt;timername&gt;] [ttoggle=  
      'true']</font></strong></td></tr><tr><td><font size="2">This will cause the named button to 
      raise button-click events for the specified numbers.&nbsp; This was a 
      first try at making expanded macros follow remaps - I see no real use for 
      it now that FlexActions are in, but it remains.&nbsp; If you have a notion 
      of how to use it, play with it and share :)</font></td></tr>
<tr><td width="100%"><font 
      size=2><strong>/flexbar lockicon [button=#] [group=  #] [off= 
'true']</font></strong></td></tr><tr><td><font size="2">This fixes icons onto the button and 
      prevents you from dragging them off in the heat of combat.&nbsp; 
      Shift-Click (not shift-drag) to get them off.&nbsp; Turn this off with 
      /flexbar lockicon button=1 off='true'</font></td></tr>
<tr><td width="100%"><font 
      size=2><strong>/flexbarraiseevent='event&nbsp;name'&nbsp;[source= 
      &lt;source&gt;][on='event'] [target=&lt;target&gt;] [if='condition'] 
      [in=#] name= [toggle='true'] 
      [tname= &lt;timer name&gt;] [ttoggle=  
      'true']</font></strong></td></tr><tr><td><font size="2">This was a first attempt to allow 
      timed actions - it allows you to raise an event in a specified amount of 
      time, then respond to that event in another command.&nbsp; Deprecated in 
      favor of the in= parameters in all commands that take on=.</font></td></tr>
<tr><td width="100%"><font 
      size=2><strong>/flexbar loadconfig config=  
      'config  name'  </font></strong></td></tr><tr><td>
      <p><font size="2">This loads a config file, which is a 
      list of flexbar commands WITHOUT the /flexbar in the front.&nbsp; This may 
      reside either in the FlexBar_Config.lua file in your flexbar directory 
      (see the file for examples) or may be written in the FlexBar scripts 
      editor.&nbsp; If written in the scripts editor you can omit the quotes and 
      stuff found in the config file.</font></p>
      <p><font size="2">Only one config may be running at 
      once, and there is a 2 second delay between commands.</font>               
       </p></td></tr>
<tr><td width="100%"><font 
      size=2><strong>/flexbar loadprofile profile=  
      'profile  name'  </font></strong></td></tr><tr><td><font size="2">The default profile for your 
      character is saved under &lt;character name&gt; of &lt;realm name&gt; - IE 
      Dhargo of Silver Hand.&nbsp; It is also Auto-loaded on logging in -- this 
      command is for loading another character's profile, or a saved backup of 
      your profile.&nbsp; Note that, while it changes all the info, any 
      currently remapped buttons may not be mapped back, so you may need to do a 
      /console reloadui to force everything to fully reload.&nbsp; One use for 
      this is saving a back up of a good setup before experimenting, then 
      reloading it if you mess up.&nbsp; IE - if I saved one under 'Dhargos 
      Backup' then:&nbsp; /flexbar loadprofile profile='Dhargos 
  Backup'</font></td></tr>
<tr><td width="100%"><font 
      size=2><strong>/flexbar saveprofile profile=  
      'profile  name'  </font></strong></td></tr><tr><td><font size="2">This saves your current profile under 
      another name.&nbsp; BE CAREFUL - if you specify the profile name of 
      another character, you will overwrite their profile.&nbsp; Primarily used 
      for backing up good configs before experimenting - /flexbar saveprofile 
      profile='Dhargos Backup'.</font></td></tr>
<tr><td width="100%"><font 
      size=2><strong> /flexbar resetall 
      confirm=  'yes' </font></strong></td></tr><tr><td><font size="2">Completely resets your character's 
      profile and reloads your UI - unless you backed it up, all your settings 
      are lost.</font></td></tr>
<tr><td width="100%"><font 
      size=2><strong> /flexbar restore 
      confirm=  'yes' </font></strong></td></tr><tr><td><font size="2">When you do a loadconfig command, a 
      temporary copy of your old profile is stored.&nbsp; This does not last 
      past logout/reloadui.&nbsp; Only one level is saved.&nbsp; Typing /flexbar 
      restore confirm='yes' will return you to that state.&nbsp; NOTE -&nbsp; 
      any remapped buttons will stay remapped until you /console 
    reloadui.</font></td></tr>
<tr><td width="100%"><font 
      size=2><strong>/flexbar safeload state= &lt;'on' 
      }  'off'&gt;  </font></strong></td></tr><tr><td><font size="2">Safeload should be 
  obsolete.</font></td></tr>
<tr><td width="100%"><font 
      size=2><strong>/flexbar tooltip state=&lt;'on' | 
      'off'&gt;&lt;  /STRONG&gt;  </font></strong></td></tr><tr><td><font size="2">Turns on and off showing of tooltips 
      when you mouse over flexbar buttons.&nbsp; IE /flexbar tooltip state='off' 
      turns them off.&nbsp; (I find them annoying mostly)&nbsp; Deprecated in 
      favor of the Global Options panel (see keybindings under the main game 
      menu to bind a key to global options or to the FlexBar main menu to access 
      the global options panel)</font></td></tr>
<tr><td width="100%"><font 
      size=2><strong>/flexbar verbose state= &lt;'on' 
      |  'off'&gt;  </font></strong></td></tr><tr><td><font size="2">Turns on or off detailed reporting of 
      what flexbar is doing - helpful for trouble shooting, but need to be OFF 
      for game play (trust me :) ) -- /flexbar verbose state='off' -- Deprecated 
      in favor of Global Options - see /flexbar tooltip.</font></td></tr>
<tr><td width="100%"><font 
      size=2><strong>/flexbar scripts</strong> </font></td></tr><tr><td><font size="2">Opens and closes the Scripts editor - 
      deprecated in favor of the keybinding / Flexbar main menu.</font></td></tr>
  <tr>
    <td width="100%">
      <p align="center"><font size="2">Flex Action 
      Commands</font></p></td></tr>
<tr><td width="100%"><font 
      size=2><strong>/flexbar flexmacro id=# 
      texture=  'texturename'&nbsp; name= 
      'macro name'&nbsp;macro=     'macro'[toggle= 'true'] 
      [reset= 'true'= ]</strong> </font></td></tr><tr><td>
      <p><font size="2">ALL flexactions are attached to the 
      ID, NOT the button.&nbsp; This allows them to move with remaps just like 
      regular actions.&nbsp; Also note, currently there is not sanity check, if 
      you do a flexmacro on an ID with a FlexScript it will overwrite it.&nbsp; 
      It however will not let you attach one to an ID with a standard game 
      action on it.</font></p>
      <p><font size="2">ID is a number from 1-120 (the maximum 
      ID allowed in WoW).&nbsp; Texture is the picture you want on the button - 
      you can either specify the texture from the list you'll find if you use 
      Blizzard's tool to unpack all the UI files OR you can use the followint 
      %variables:&nbsp; %backpack will give the backpack texture, %button##, 
      where ## is 1-120 will give teh texture currently on the named button and 
      %macro## where ## is a number from 1-430 (I think) will give you the icon 
      from the macro icon selection panel.&nbsp; The count left to right,. top 
      to bottom.&nbsp; So, %macro 21 is the 5th row, first icon on the 
      panel.&nbsp; A gui to select these will be coming.&nbsp; Name is a name 
      for the macro, this will eventually be displayed where Blizzard displays 
      their macro names, I just didn't do it for 1.37.&nbsp; Macro either the 
      macro text to perform (EG "/dance") or the name of a multiline macro you 
      created in the Scripts editor and saved.&nbsp; This must be exactly as you 
      saved it - capitalization and all.&nbsp;&nbsp; Another form of multiline 
      macro may also be used macro= ['/dance' /fbwait 30' '/salute'] will 
      execute those commands as a 3 line macro.</font></p>
      <p><font size="2">If toggle is true and there is already 
      a flexmacro on the button, it will erase that macro.&nbsp; If reset is 
      true it will clear the macro.</font></p>
      <p><font size="2">Example 1:&nbsp; /flexbar flexmacro 
      id=120 texture='%macro120' name='DANCE' macro='/dance'</font></p>
      <p><font size="2">will create a macro that makes you 
      dance.&nbsp; If you haven't remapped button 120's ID, it will show up on 
      button 120, and any button you remap to ID 120.</font></p>
      <p><font size="2">Example 2:&nbsp; /flexbar flexmacro 
      id=120 texture='%macro120' name='Dance2' macro='dance macro'</font></p>
      <p><font size="2">If you have created a macro 
      like:</font></p>
      <p><font size="2">/em is going nuts cause he wants to 
      dance</font></p>
      <p><font size="2">/fbdoin 30 /dance</font></p>
      <p><font size="2">will create a macro that makes you 
      emote "Dhargo is going crazy because he wants to dance" then executes the 
      dance emote in 3 seconds.&nbsp; If you haven't remapped button 120's ID, 
      it will show up on button 120, and any button you remap to ID 
      120.</font></p>
      <p><font size="2">Note: to remove flexscript settings&nbsp;from a button 
      completely use&nbsp;<!--StartFragment --></font><font size="3"> /flexbar 
      flexmacro id=# reset='true' texture=' ' macro=' ' name=' ' 
  </font></p></td></tr>
<tr><td width="100%"><font 
      size=2><strong>/flexbar flexscript id=# texture= 'texture 
      name'&nbsp;name=  'name' script=  'script'[toggle= 'true'] 
      [reset= 'true'= ]</strong> </font></td></tr><tr><td>
      <p><font size="2">Essentially like flexmacro, but uses 
      lua scripts instead:</font></p>
      <p><font size="2">Example 1: /flexbar flexscript id=120 
      texture='%backpack' name='OpenBags' script='OpenAllBags()'</font></p>
      <p><font size="2">creates an action at ID 120 that will 
      open/close all your bags when you click it.</font></p>
      <p><font size="2">Example 2:&nbsp; If you have the 
      following script in the editor</font></p>
      <p><font size="2">if FBConditions["hasaura"]("Battle 
      Stance") then</font></p>
      <p><font size="2">&nbsp;&nbsp;&nbsp; 
      FB_CastSpellByName("Overpower")</font></p>
      <p><font size="2">else</font></p>
      <p><font size="2">&nbsp;&nbsp;&nbsp; 
      FB_CastSpellByName("Battle Stance")</font></p>
      <p><font size="2">end</font></p>
      <p><font size="2">Then save it as "my 
      overpower"</font></p>
      <p><font size="2">/flexbar flexscript id=120 
      texture='%macro120' name='overpower' script='my overpower' </font></p>
      <p><font size="2">will put an action&nbsp; on ID 120 
      that will check for battle stance and cast overpower if you're in it, 
      otherwise cast battle stance.</font></p>
      <p><font size="2">The advantage of these is the 
      character limit for the editor is 10240 characters rather than 256 for 
      macros.</font></p>
      <p><font size="2">Note: to remove flexscript settings&nbsp;from a button 
      completely use&nbsp;<!--StartFragment --></font><font size="3"> /flexbar 
      flexscript id=# reset='true' texture=' ' script=' ' name=' ' 
  </font></p></td></tr>
<tr><td width="100%"><font 
      size=2><strong>/flexbarflexpet id=  #&nbsp;petid= # '[toggle=  'true'][reset=  'true'= ]</strong> 
      </font></td></tr><tr><td>
      <p><font size="2">Set's the specified ID to mimic the 
      specified pet button.&nbsp; Pet ID is the number of the button counting 
      from one starting at the left of the default pet bar.&nbsp; Note 
      a&nbsp;couple of limitations in these:&nbsp; 1 - you can't drag pet 
      actions into them at this time, you must show the original pet bar and put 
      the pet actions in there - the flex buttons will update to match.&nbsp; 
      2.&nbsp; If the mimiced pet button has no action and you have hidegrid on, 
      the button will not hide.</font></p>
      <p><font size="2">Example:&nbsp; /flexbar flexpet id=1 
      petid=   1&lt; /FONT&gt;</p>
      <p><font size="2">Any button with id 1 will now display 
      the the icon from and execute the action on pet button 1 (usually 
      "attack").</font>               
            </p></font></td></tr>
<tr><td width="100%"><font 
      size=2><strong> /flexbar clearflexid=  #</font></strong></td></tr><tr><td>
      <p><font size="2">Clear a flex action off the specified 
      ID</font></p></td></tr>
<tr><td width="100%"><font 
      size=2><strong>/flexbar runmacro macro=   'macro' [on='event'] 
      [target= &lt;target&gt;] [if= 'condition'] [in=#] 
      [tname=  &lt;timername&gt;] [ttoggle=  
      'true']</font></strong></td></tr><tr><td><font size="2">This is used to run a macro on a 
      specified event/time/if condition.&nbsp; THIS CAN NOT BE USED TO AUTOCAST 
      A SPELL - that is not allowed by the game engine.&nbsp; The only way to 
      cast a spell in here is if it comes from a buttonclick event - and that is 
      deprecated in favor of flex actions.&nbsp;&nbsp; Macro may be either a 
      direct macro (macro='/dance') or the name of a mutiline macro from the 
      scripts editor.&nbsp; Another form of multiline macro may also be used 
      macro= ['/dance'/fbwait 30' '/salute'] will execute those commands as a 3 
      line macro.</font></td></tr>
<tr><td width="100%"><font 
      size=2><strong>/flexbar runscript script= 'script' 
      [on='event'] [target= &lt;target&gt;] [if= 'condition'] [in=#] 
      [tname=  &lt;timername&gt;] [ttoggle=  
      'true']</font></strong></td></tr><tr><td><font size="2">This is used to run a&nbsp;script on 
      a specified event/time/if condition.&nbsp; THIS CAN NOT BE USED TO 
      AUTOCAST A SPELL - that is not allowed by the game engine.&nbsp; The only 
      way to cast a spell in here is if it comes from a buttonclick event - and 
      that is deprecated in favor of flex actions.&nbsp;&nbsp;Script may be 
      either a direct lua command&nbsp;(macro='OpenAllBags()') or the name of 
      a&nbsp;long script from the scripts editor.</font></td></tr>
<tr><td width="100%"><font 
      size=2><strong>/flexbar settexture id= 
      [texture= ] [toggle= 'true'][reset= 'true'= 
      ][on=  'event'] [target=  &lt;target&gt;][if='condition'] 
      [in=#] [tname= &lt;timer name&gt;&lt;timername&gt;] 
      [ttoggle=   
  'true']</font></strong></td></tr><tr><td><font size="2">DEPRECATED in 1.37 - was the original 
      code to attach textures to AutoItems, FlexMacros, FlexScripts</font></td></tr>
  <tr>
    <td width="100%">
      <p align="center"><font size="2">Event Commands 
      (deprecated - see event editor)</font></p></td></tr>
<tr><td width="100%"><font 
      size=2><strong> /flexbar deleteevent 
    event=  # </font></strong></td></tr><tr><td><font size="2">DEPRECATED IN FAVOR OF THE EVENT 
      EDITOR</font></td></tr>
<tr><td width="100%"><font 
      size=2><strong>/flexbar listevents</strong> </font></td></tr><tr><td><font size="2">DEPRECATED IN FAVOR OF THE EVENT 
      EDITOR</font></td></tr>
  <tr>
    <td width="100%">
      <p align="center"><font size="2">Commands to display usage 
      lists</font></p></td></tr>
<tr><td width="100%"><font 
      size=2><strong>/flexbar appearance</strong> </font></td></tr><tr><td><font size="2">Lists all appearance 
    commands</font></td></tr>
<tr><td width="100%"><font 
      size=2><strong>/flexbar eventhelp</strong> </font></td></tr><tr><td><font size="2">Lists all event commads (obsolete as 
      they are)</font></td></tr>
<tr><td width="100%"><font 
      size=2><strong>/flexbar grouphelp</strong> </font></td></tr><tr><td><font size="2">Lists all group commands</font></td></tr>
<tr><td width="100%"><font 
      size=2><strong>/flexbar mischelp</strong> </font></td></tr><tr><td><font size="2">Lists all 
    misc.&nbsp;commands</font></td></tr>
<tr><td width="100%"><font 
      size=2><strong>/flexbar movement</strong> </font></td></tr><tr><td><font size="2">Lists all movement 
  commands</font></td></tr>
  
</table></p>
</body>
</html>